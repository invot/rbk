@page
@model IndexModel
@{
    ViewData["Title"] = "Supported Environments";
    var pg = ViewBag;
        pg.title = "Environments";
        pg.id = 2;
        pg.parent = null;
        pg.hasSidebar = true;
        pg.hasFooter = true;
        pg.type = "default";
}

<section class="introduction">
    <div class="wrapper">

        <blockquote class="jumbotron shadow">
            <h1>Supported Environments</h1>
            <p class="lead">This UI Kit supports all major "evergreen" browsers running on any device that supports them.</p>
            <hr />
            <p>The following will help provide information on how to properly construct the layout of an application to display properly on every supported device.</p>
        </blockquote>

        <div class="mb-4">

          <h2 id="supported-browsers">Supported browsers</h2>

            <p>DCF's UI Kit supports the <strong>latest, stable releases</strong> of all major browsers and platforms. On Windows, <strong>we support Internet Explorer 11 and the latest version of Microsoft Edge</strong>.</p>

            <p>Alternative browsers which use the latest version of WebKit, Blink, or Gecko, whether directly or via the platform's web view API, are not explicitly supported. However, the kit should (in most cases) display and function correctly in these browsers as well.</p>

            <h3 id="mobile-devices">Mobile devices</h3>

            <p>Generally speaking, this UI Kit supports the latest versions of each major platform's default browsers. Note that proxy browsers (such as Opera Mini, Opera Mobile's Turbo mode, UC Browser Mini, Amazon Silk) are not supported.</p>

            <table class="table table-bordered table-striped bg-white shadow">
            <thead>
                <tr>
                <td></td>
                <th>Chrome</th>
                <th>Firefox</th>
                <th>Safari</th>
                <th>Android Browser &amp; WebView</th>
                <th>Microsoft Edge</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                <th scope="row">Android</th>
                <td class="text-success">Supported</td>
                <td class="text-success">Supported</td>
                <td class="text-muted">N/A</td>
                <td class="text-success">Android v5.0+ supported</td>
                <td class="text-success">Supported</td>
                </tr>
                <tr>
                <th scope="row">iOS</th>
                <td class="text-success">Supported</td>
                <td class="text-success">Supported</td>
                <td class="text-success">Supported</td>
                <td class="text-muted">N/A</td>
                <td class="text-success">Supported</td>
                </tr>
                <tr>
                <th scope="row">Windows 10 Mobile</th>
                <td class="text-muted">N/A</td>
                <td class="text-muted">N/A</td>
                <td class="text-muted">N/A</td>
                <td class="text-muted">N/A</td>
                <td class="text-success">Supported</td>
                </tr>
            </tbody>
            </table>

            <h3 id="desktop-browsers">Desktop browsers</h3>

            <p>Similarly, the latest versions of most desktop browsers are supported.</p>

            <table class="table table-bordered table-striped bg-white shadow">
            <thead>
                <tr>
                <td></td>
                <th>Chrome</th>
                <th>Firefox</th>
                <th>Internet Explorer</th>
                <th>Microsoft Edge</th>
                <th>Opera</th>
                <th>Safari</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                <th scope="row">Mac</th>
                <td class="text-success">Supported</td>
                <td class="text-success">Supported</td>
                <td class="text-muted">N/A</td>
                <td class="text-muted">N/A</td>
                <td class="text-success">Supported</td>
                <td class="text-success">Supported</td>
                </tr>
                <tr>
                <th scope="row">Windows</th>
                <td class="text-success">Supported</td>
                <td class="text-success">Supported</td>
                <td class="text-success">Supported, IE11+</td>
                <td class="text-success">Supported</td>
                <td class="text-success">Supported</td>
                <td class="text-danger">Not supported</td>
                </tr>
            </tbody>
            </table>

            <p>For Firefox, in addition to the latest normal stable release, the UI Kit also supports the latest <a href="https://www.mozilla.org/en-US/firefox/organizations/faq/">Extended Support Release (ESR)</a> version of Firefox.</p>

            <p>Unofficially, this kit should look and behave well enough in Chromium and Chrome for Linux, Firefox for Linux, and Internet Explorer 9, though they are not officially supported.</p>

            <p>For a list of some of the browser bugs that this kit has to grapple with, see bootstrap's <a href="https://getbootstrap.com/docs/4.0/browser-bugs/" target="_blank">Wall of browser bugs</a>.</p>

            <h2 id="internet-explorer">Internet Explorer</h2>

            <p>Internet Explorer 11+ is supported; IE9 and down is not. Please be aware that some CSS3 properties and HTML5 elements are not fully supported in IE11, or require prefixed properties for full functionality. Visit <a href="https://caniuse.com/">Can I use…</a> for details on browser support of CSS3 and HTML5 features.</p>

        <hr />

        </div>

        <div class="mb-4">
            <h2 id="supported-browsers">Cross-Browser Compatibility</h2>

            <p>Developing software with things like Cross-Browser Compatibility in mind from the beginning helps ensure that special stylesheets, code, or hacks aren't required for the software to properly run in particular browsers. </p>
            <p>Unexpected behaviors can arise between browsers if the markup isn't strictly valid. Tools like the <a href="https://validator.w3.org/" target="_blank">W3C Markup Validation</a> Service can detect anything that isn't standards-compliant. Also, consider how the software may perform with the stylesheets or JavaScript disabled.</p>

            <div class="row justify-content-md-center mb-4">
                <div class="col-6 p-3 border bg-white shadow">
                    <a href="/img/cross-browser.png" target="_blank"><img src="/img/cross-browser.png"  width="100%" class="border" /></a>
                    <div class="text-muted"><i>List of features supported by popular browsers</i></div>
                </div>
            </div>

            <p>Though web standards encourage developers to build sites that degrade gracefully, older browsers lack the ability to support modern frameworks. As time progresses, this gap only continues to grow. </p>
            <p>Modern browsers like Microsoft's Edge, Google Chrome, Mozilla Firefox, and Safari, have all incorporated ways to address continuous technological progress by automatically installing updates that patch security issues and support the latest web functionalities. Browsers that update automatically are considered Evergreen Browsers.</p>
            <p>It is counter-intuitive for modern software to support a browser that will never adopt any new features. Today, less than 1% of the computers used in a professional environment are unable to support modern browsers. This is why dropping official support for non-evergreen browsers is inevitable.</p>

            <h3>Browser Sniffing vs Feature Detection</h3>

            <p>Browser sniffing (also known as browser detection) is a set of techniques used to determine the web browser a visitor is using, and to serve browser-appropriate content to the visitor. Though this practice is still somewhat common, its usefulness is exclusive to non-evergreen browsers.</p>
            <p>Feature detection (also feature testing) is a technique used for handling differences between runtime environments (typically web browsers or user agents), by programmatically testing for clues that the environment may or may not offer certain functionality. Feature detection is arguably more reliable and future-proof than other techniques like browser sniffing and browser-specific CSS hacks.</p>
            <p>Feature detection allows software to take an inventory of the technologies it uses, allows for graceful degradation, and can provide detailed reasons as to why something is unsupported in the User's current environment – along with detailed steps on how to address the issue.</p>
            <p>A user accessing software from an unsupported browser should either be greeted with a warning that things may appear or behave oddly as they continue, or be prompted to update their browser before they're allowed access.</p>

            <h3>Responsive Behavior</h3>

            <p>Though the size of devices will continue to fluctuate as time progresses, there will nonetheless be only a few categories that device displays can fall into. It's important to create a design that can adapt between mobile, tablet, and desktop displays without losing functionality or a common aesthetic. </p>

            <div class="row justify-content-md-center ">
                <div class="col-6 p-3 border bg-white mb-4 shadow">
                    <a href="/img/responsive.png" target="_blank"><img src="/img/responsive.png" width="100%" class="border" /></a>
                    <div class="text-muted"><i>Where to place breakpoints for common displays</i></div>
                </div>
            </div>

            <p>It's important to define breakpoints for each category of device and not for one particular device at a time. Breakpoints are chunks of code that change the layout of an application depending on the size of the User's screen. Common places to set breakpoints are between the typical mobile screen widths and tablet widths. Any screen width between two breakpoints should share a common, flexible layout.</p>

            <p>A common practice is to design mobile-first. This means designing and coding for mobile devices before designing and coding for desktop or any other device, which generally results in the fastest loading time for mobile and a cleaner, better organized layout overall. This means setting breakpoints for screens with a minimum width of approx. 600, 900, 1200, and 1800 pixels. Any device with a display below 600 pixels wide would then take advantage of the default styling. </p>

            <p>This is opposed to a desktop-first design, which would essentially set breakpoints for devices with a maximum width of pixels. Only the largest displays would then benefit from the default styling.</p>

            <p>Though it is not uncommon for both types of breakpoints to be used, this should be avoided if possible, as it will result in longer loading times due to multiple sets of rules being applied to each screen size.</p>


        </div>

        <div class="p-4"></div>

    </div>
</section>
