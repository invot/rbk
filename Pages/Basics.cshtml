@page
@model IndexModel
@{
    ViewData["Title"] = "Basics";
    var pg = ViewBag;
        pg.title = "Basics";
        pg.id = 1;
        pg.parent = null;
        pg.hasSidebar = true;
        pg.hasFooter = true;
        pg.type = "default";
}

<section class="introduction">
    <div class="wrapper">

        <blockquote class="jumbotron shadow">
            <h1>Basic Principles</h1>
            <p class="lead">It's important to keep these core principles in mind while making design decisions.</p>
            <hr />
            <p>These gudelines or principles will create a unified and consistent approach to the overall design of software running within the DCF ecosystem.</p>
            <p><a class="btn btn-primary" href="https://dcfwebdemo/files/it/web/pdf/ui-design-guide-guidelines.pdf" target="_blank"><i class="fas fa-file-pdf"></i> &nbsp; Download <b>Principle Guidelines</b></a> <small class="text-muted">1.5mb</small><p>
        </blockquote>

        <div class="mb-4">
            <p>Nobody wants to build software that's needlessly complicated and difficult to use. But what exactly makes software simple and user-friendly? What makes a user interface effective?</p>
            <p>At a high level, effective software is visually apparent and forgiving, instilling in the User a sense of control. Effective software performs a maximum of work, while requiring a minimum of time and effort from the User. The User quickly sees the breadth of their options, grasps how to achieve their goals, and then easily settles down to do their work. Little to no training or instruction is required because, no matter what the User is doing, the software remains visually and functionally consistent. Words, situations, or interactions do not fluctuate in their meaning or behavior and never surprise or astonish the User.</p>
            <p>Without any Users to interface with or report to, software is essentially useless, because people are an integral part of the system. When a design is User-centered, software becomes focused on how the User can, wants, or needs to use the product, rather than forcing the User to change their behavior to accommodate the software's methods.</p>

            <hr />

            <h3>The Guidelines</h3>

            <p class="lead">1. Value the User's time and energy</p>

            <p class="ml-4">All software exists to help Users perform tasks. Effective software exists to make these tasks as easy to perform as possible. Making a task easier is not about reducing mouseclicks or key-presses; Effective software makes each action as robust, meaningful, and efficient as possible. This is achieved by simplifying the structure of the tasks, making every step along the way meaningful and intuitive, and having the outcome be rewarding.</p>
            <p class="ml-4">In a nutshell, the great efficiency breakthroughs in software are to be found in the fundamental architecture of the system, not in the surface design of the interface; and as tasks are repeated by the User throughout their workday, any inefficiency in their workflow begins to add up to a significant amount of time wasted. Even a minor refinement can trim hours of labor out of the User's workweek.</p>

            <p class="lead">2. Be honest and transparent with the User</p>

            <p class="ml-4">Stated plainly, things should do what they say and act how they're expected to. An effective interface builds the User's trust and confidence while helping them make sense of what they can and cannot do. The proximity of actionable items to corresponding descriptive text, the tone of the writing, the labels on form elements and buttons â€“all of these things are the means by which software builds a subconscious level of credibility.</p>

            <p class="lead">3. Match the User's real-world environment</p>

            <p class="ml-4">It can take time to learn something new, and software is no exception. Effective software has a minimal learning curve, because it mirrors the language and concepts the User is already familiar with.</p>
            <p class="ml-4">The system should speak the User's language, with words, phrases and concepts familiar to them, rather than system-oriented terms. Follow real-world conventions, making information appear in a natural and logical order. Processes should all have a clear beginning, middle, and end, like they do in the real world. When a process is finished, be explicit that their task is completed. Congratulate the User on a job well done.</p>

            <p class="lead">4. Allow the User to make mistakes</p>

            <p class="ml-4">Many times, when trying to prevent the User from doing something wrong, a designer inadvertently makes it impossible for the User to easily do what they need. It's important to trust the User with their control of the software. Enforcing strict workflows, hand-holding, and constant verification can all turn what should be a pleasant environment into a prison. Nobody can stop mistakes from happening, but they can be kept to a minimum, and they can be used as a learning experience. When a mistake is made, effective software can quickly bounce back and helps the User to fix it, without having to refer to a manual or customer support. </p>

            <p class="lead">5. Make the User's job easy</p>

            <p class="ml-4">Effective software can anticipate the user's wants and needs. Do not expect the User to leave the current screen to search for and collect necessary information. All the right tools and information must be in the right place at the right time. Additionally, if a tool or source for information is there on the screen, but users can't find it, it may as well not even be present. Alternatively, if a user needs to open multiple instances of the same software to complete a single task, chances are the tools they need are in too many places. </p>

            <p class="ml-4">While it's not always a good idea to limit users' choices, in cases where there are clear rules that define acceptable options, it can be a good strategy to constrain the types of input users can make. It's important to keep clutter to a minimum. All unnecessary information competes for the user's limited attentional resources, which could inhibit the User's attention, having them forget what they were doing. Therefore, the display must be reduced to only the necessary components for the current tasks, whilst providing clearly visible and unambiguous means of navigating to other content.</p>

            <p class="ml-4">Creating a balance between providing the User with what they need and nothing they don't requires that developers have a deep understanding of both the tasks the User is performing and the User that is performing those tasks.</p>

            <p class="lead">6. Teach the User as they explore</p>

            <p class="ml-4">Effective software strives to eliminate its learning curve. In practice, however, all applications and services, no matter how simple, will take some getting used to. It's important to keep in mind that some Users will require more explanation than others. Some concepts may be intuitive to a certain set of users and confusing to another. </p>

            <p class="ml-4">Make learning fun and discoverable. Learning by doing is a lot more fun and effective than reading a list of instructions. Use animation and interactivity to teach gradually and in context.</p>

            <div class="m-4 p-4"></div>

        </div>


        <!--<div class="row no-gutters">
            <div class="col-6">
                <div class="card m-2">
                    <div class="card-header">
                        CLARITY
                    </div>
                    <div class="card-body">
                        <p class="card-text">Eliminate ambiguity. Enable people to see, understand, and act with confidence.</p>
                    </div>
                </div>
            </div>
            <div class="col-6">
                <div class="card m-2">
                    <div class="card-header">
                        EFFICIENCY
                    </div>
                    <div class="card-body">
                        <p class="card-text">Streamline and optimize workflows. Intelligently anticipate needs to help people work better, smarter, and faster.</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="row no-gutters">
            <div class="col-6">
                <div class="card m-2">
                    <div class="card-header">
                        CONSISTENCY
                    </div>
                    <div class="card-body">
                        <p class="card-text">Create familiarity and strengthen intuition by applying the same solution to the same problem.</p>
                    </div>
                </div>
            </div>
            <div class="col-6">
                <div class="card m-2">
                    <div class="card-header">
                        BEAUTY
                    </div>
                    <div class="card-body">
                        <p class="card-text">Demonstrate respect for people's time and attention through thoughtful and elegant craftsmanship.</p>
                    </div>
                </div>
            </div>
        </div>-->


    </div>
</section>
